import groovyx.gpars.GParsPool

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.codehaus.gpars:gpars:1.2.1"
        classpath "net.masterthought:cucumber-reporting:5.1.1"
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
}

apply plugin: "application"

repositories {
    mavenCentral()
}

dependencies {
    // Dependencies added by "https://start.spring.io/"
    implementation "org.springframework.boot:spring-boot-starter-web"
    testImplementation("org.springframework.boot:spring-boot-starter-test")

    // Cucumber related dependencies
    compile "io.cucumber:cucumber-core:${cucumberVersion}"
    compile "io.cucumber:cucumber-java:${cucumberVersion}"
    compile "io.cucumber:cucumber-spring:${cucumberVersion}"
    compile "io.cucumber:cucumber-junit:${cucumberVersion}"
    compile "io.cucumber:cucumber-junit-platform-engine:${cucumberVersion}"
    compile "io.cucumber:cucumber-testng:${cucumberVersion}"
}

distributions {
    main {
        baseName = "parallel-demo"
    }
}

task testJUnit4(type: Test) {
    include "**/CucumberRunnerJunit4.**"

    doLast {
        generateReport("build/reports/JUnit4")
    }
}
task testJUnit4_parallel(type: Test) {
    include "**/CucumberRunnerJunit4Parallel.**"
    maxParallelForks = 8

    doLast {
        generateReport("build/reports/JUnit4_parallel")
    }
}

//task testJUnit5(type: Test) {
//    useJUnitPlatform()
//    include '**/CucumberRunnerJunit5.**'
//
//    systemProperties = [
//            "cucumber.plugin": "json:build/reports/JUnit5/json/testJUnit5.json, timeline:build/reports/JUnit5/timeline/"
//    ]
//
//    doLast {
//        generateReport("build/reports/JUnit5")
//    }
//}
task testJUnit5_parallel(type: Test) {
    useJUnitPlatform()
    include "**/CucumberRunnerJunit5.**"

    systemProperties = [
            "cucumber.plugin"                                     : "json:build/reports/JUnit5_parallel/json/testJUnit5_parallel.json, timeline:build/reports/JUnit5_parallel/timeline/",
            "cucumber.execution.parallel.enabled"                 : true,
            "cucumber.execution.parallel.config.strategy"         : "fixed",
            "cucumber.execution.parallel.config.fixed.parallelism": 8
    ]

    doLast {
        generateReport("build/reports/JUnit5_parallel")
    }
}

task testTestNG(type: Test) {
    useTestNG()
    scanForTestClasses = false
    include "**/CucumberRunnerTestNG.**"

    doLast {
        generateReport("build/reports/TestNG")
    }
}

task testTestNG_parallel(type: Test) {
    useTestNG() {
        options {
            parallel = "test"
            threadCount = 8
        }
    }
    testLogging.showStandardStreams = true
    scanForTestClasses = false
    include "**/CucumberRunnerTestNGParallel.**"

    doLast {
        generateReport("build/reports/TestNG")
    }
}

task testCucumberCLI {
    dependsOn(assemble, testClasses)
    doLast {
        def arglist = [
                "-p", "json:build/reports/CucumberCLI/json/testCucumberCLI.json",
                "--glue", "com.example.cucumber.gradle.parallel.demo",
                "${project.projectDir}/src/test/resources/"
        ]
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = sourceSets.test.runtimeClasspath
            args = arglist
        }
        generateReport("build/reports/CucumberCLI")
    }
}

task testCucumberCLI_parallel {
    dependsOn(assemble, testClasses)
    doLast {
        def features = fileTree(dir: "${project.projectDir}/src/test/resources/").include("**/*.feature")
        GParsPool.withPool(8) {
            features.eachParallel { File file ->
                def arglist = [
                        "-p", "json:build/reports/CucumberCLI_parallel/json/${file.name}.json",
                        "--glue", "com.example.cucumber.gradle.parallel.demo",
                        "${file.canonicalPath}"
                ]
                javaexec {
                    main = "io.cucumber.core.cli.Main"
                    classpath = sourceSets.test.runtimeClasspath
                    args = arglist
                }
            }
        }

        generateReport("build/reports/CucumberCLI_parallel")
    }
}

task testJUnit5(type: Test) {
    useJUnitPlatform()
    include '**/CucumberRunnerJunit5.**'

    systemProperties = [
            "server.port.forTest": mySqlAppPort,
            "cucumber.plugin": "json:build/reports/JUnit5/json/testJUnit5.json, timeline:build/reports/JUnit5/timeline/"
    ]

    doLast {
        generateReport("build/reports/JUnit5")
    }
}
task testMySql(){
    dependsOn("docker:executeAgainstMySqlComposeUp")
    dependsOn("testJUnit5")
    testJUnit5.mustRunAfter(tasks.findByPath('docker:executeAgainstMySqlComposeUp'))
    finalizedBy('docker:executeAgainstMySqlComposeDownForced')
}
tasks.findByPath("docker:unzipAppDistribution").dependsOn(bootDistZip)

// THis dependency is executed in parallel because we have the property org.gradle.parallel=true
task testDBInParallel(){
    dependsOn("testJUnit5") // This can be other DB task test
    dependsOn("testMySql")
}


// Sample of dynamic creation
void createTask(String databaseType) {
    String taskName = "executeTestAgainst" + databaseType;
    task (taskName) {
        useJUnitPlatform()
        include '**/CucumberRunnerJunit5.**'

        systemProperties = [
                "server.port.forTest": databaseType,
                "cucumber.plugin": "json:build/reports/JUnit5/json/testJUnit5.json, timeline:build/reports/JUnit5/timeline/"
        ]

        doLast {
            generateReport("build/reports/JUnit5")
        }
    }
}

import net.masterthought.cucumber.ReportBuilder
import net.masterthought.cucumber.Configuration
import net.masterthought.cucumber.presentation.PresentationMode;
import net.masterthought.cucumber.sorting.SortingMethod;

task report(){
    doLast {
        generateReport("build/reports/JUnit5")
    }
}
def generateReport(String pathToJsonFiles) {
    File reportOutputDirectory = createBaseReportFolder(pathToJsonFiles)
    Configuration configuration = new Configuration(reportOutputDirectory, "cucumber-report")
    configuration.setSortingMethod(SortingMethod.NATURAL);
    configuration.addPresentationModes(PresentationMode.EXPAND_ALL_STEPS);
    configuration.addPresentationModes(PresentationMode.PARALLEL_TESTING);

    ReportBuilder reportBuilder = new ReportBuilder(getReportFiles(pathToJsonFiles), configuration)
    reportBuilder.generateReports()
}

def getReportFiles(pathToJsonFiles){
    def dir = new File("${pathToJsonFiles}/json")
    def jsonReportFiles = []
    dir.eachFileRecurse (groovy.io.FileType.FILES) { file ->
        jsonReportFiles << file.toString()
    }
    jsonReportFiles
}

def createBaseReportFolder(pathToJsonFiles) {
    new File("${pathToJsonFiles}/report").mkdir()
    new File("${pathToJsonFiles}/report/cucumber-html-reports").mkdir()
    new File("${pathToJsonFiles}/report")
}